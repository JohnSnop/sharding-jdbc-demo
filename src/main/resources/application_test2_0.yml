
wf:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    username: root
    password: WF##(QZP4eSkm2QBTiqH3x5FYTftIemPlhTYv15gaU50L2Bz9Ltnk2gurNJRV5eX1MYFk)
    driver-class-name: com.mysql.jdbc.Driver
spring:
  main:
    allow-bean-definition-overriding: true  # 一个实体类对应两张表
  shardingsphere:
    datasource:
      names: [test2020,test2021] #名字自定义
      test2020:
        url: "jdbc:mysql://localhost:3306/sharding-db-1?useUnicode=true&characterEncoding=utf-8&useSSL=false\
                 &serverTimezone=GMT%2B8"
        type: ${wf.datasource.type}
        driver-class-name: ${wf.datasource.driver-class-name}
        username: ${wf.datasource.username}
        password: ${wf.datasource.password}
      test2021:
        url: "jdbc:mysql://localhost:3306/sharding-db-2?useUnicode=true&characterEncoding=utf-8&useSSL=false\
                 &serverTimezone=GMT%2B8"
        type: ${wf.datasource.type}
        driver-class-name: ${wf.datasource.driver-class-name}
        username: ${wf.datasource.username}
        password: ${wf.datasource.password}
    sharding:
      tables:
        course:
          actual-data-nodes: test202$->{1..2}.course_$->{1..2}
          key-generator:    # 指定 course 表里面主键 cid 生成策略 SNOWFLAKE
            column: cid
            type: SNOWFLAKE
          table-strategy:
            inline: {sharding-column: id, algorithm-expression: course_$->{cid % 2 + 1}}
          database-strategy:
            inline: {sharding-column: user_id, algorithm-expression: test202$->{user_id % 2 + 1}}
    props:
      sql:
        show: true



jasypt:
  encryptor:
    bean: wfEncryptorBean
    property:
      prefix: WF##(
      suffix: )